// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Tezos.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A list of operations and a branch.
/// Next field: 3
public struct TW_Tezos_Proto_OperationList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var branch: String = String()

  public var operations: [TW_Tezos_Proto_Operation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// An operation that can be applied to the Tezos blockchain.
/// Next field: 10
public struct TW_Tezos_Proto_Operation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var counter: Int64 {
    get {return _storage._counter}
    set {_uniqueStorage()._counter = newValue}
  }

  public var source: String {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  public var fee: Int64 {
    get {return _storage._fee}
    set {_uniqueStorage()._fee = newValue}
  }

  public var gasLimit: Int64 {
    get {return _storage._gasLimit}
    set {_uniqueStorage()._gasLimit = newValue}
  }

  public var storageLimit: Int64 {
    get {return _storage._storageLimit}
    set {_uniqueStorage()._storageLimit = newValue}
  }

  public var kind: TW_Tezos_Proto_Operation.OperationKind {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  /// Operation specific data depending on the type of the operation.
  public var operationData: OneOf_OperationData? {
    get {return _storage._operationData}
    set {_uniqueStorage()._operationData = newValue}
  }

  public var revealOperationData: TW_Tezos_Proto_RevealOperationData {
    get {
      if case .revealOperationData(let v)? = _storage._operationData {return v}
      return TW_Tezos_Proto_RevealOperationData()
    }
    set {_uniqueStorage()._operationData = .revealOperationData(newValue)}
  }

  public var transactionOperationData: TW_Tezos_Proto_TransactionOperationData {
    get {
      if case .transactionOperationData(let v)? = _storage._operationData {return v}
      return TW_Tezos_Proto_TransactionOperationData()
    }
    set {_uniqueStorage()._operationData = .transactionOperationData(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Operation specific data depending on the type of the operation.
  public enum OneOf_OperationData: Equatable {
    case revealOperationData(TW_Tezos_Proto_RevealOperationData)
    case transactionOperationData(TW_Tezos_Proto_TransactionOperationData)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Tezos_Proto_Operation.OneOf_OperationData, rhs: TW_Tezos_Proto_Operation.OneOf_OperationData) -> Bool {
      switch (lhs, rhs) {
      case (.revealOperationData(let l), .revealOperationData(let r)): return l == r
      case (.transactionOperationData(let l), .transactionOperationData(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public enum OperationKind: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Note: Proto3 semantics require a zero value.
    case endorsement // = 0
    case reveal // = 7
    case transaction // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .endorsement
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .endorsement
      case 7: self = .reveal
      case 8: self = .transaction
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .endorsement: return 0
      case .reveal: return 7
      case .transaction: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension TW_Tezos_Proto_Operation.OperationKind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Tezos_Proto_Operation.OperationKind] = [
    .endorsement,
    .reveal,
    .transaction,
  ]
}

#endif  // swift(>=4.2)

/// Transaction operation specific data.
/// Next field: 3
public struct TW_Tezos_Proto_TransactionOperationData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var destination: String = String()

  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Reveal operation specific data.
/// Next field: 2
public struct TW_Tezos_Proto_RevealOperationData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var publicKey: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Tezos.Proto"

extension TW_Tezos_Proto_OperationList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OperationList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "branch"),
    2: .same(proto: "operations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.branch)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.operations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.branch.isEmpty {
      try visitor.visitSingularStringField(value: self.branch, fieldNumber: 1)
    }
    if !self.operations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.operations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tezos_Proto_OperationList, rhs: TW_Tezos_Proto_OperationList) -> Bool {
    if lhs.branch != rhs.branch {return false}
    if lhs.operations != rhs.operations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tezos_Proto_Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "counter"),
    2: .same(proto: "source"),
    3: .same(proto: "fee"),
    4: .standard(proto: "gas_limit"),
    5: .standard(proto: "storage_limit"),
    7: .same(proto: "kind"),
    8: .standard(proto: "reveal_operation_data"),
    9: .standard(proto: "transaction_operation_data"),
  ]

  fileprivate class _StorageClass {
    var _counter: Int64 = 0
    var _source: String = String()
    var _fee: Int64 = 0
    var _gasLimit: Int64 = 0
    var _storageLimit: Int64 = 0
    var _kind: TW_Tezos_Proto_Operation.OperationKind = .endorsement
    var _operationData: TW_Tezos_Proto_Operation.OneOf_OperationData?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _counter = source._counter
      _source = source._source
      _fee = source._fee
      _gasLimit = source._gasLimit
      _storageLimit = source._storageLimit
      _kind = source._kind
      _operationData = source._operationData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._counter)
        case 2: try decoder.decodeSingularStringField(value: &_storage._source)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._fee)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._gasLimit)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._storageLimit)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._kind)
        case 8:
          var v: TW_Tezos_Proto_RevealOperationData?
          if let current = _storage._operationData {
            try decoder.handleConflictingOneOf()
            if case .revealOperationData(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operationData = .revealOperationData(v)}
        case 9:
          var v: TW_Tezos_Proto_TransactionOperationData?
          if let current = _storage._operationData {
            try decoder.handleConflictingOneOf()
            if case .transactionOperationData(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operationData = .transactionOperationData(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._counter != 0 {
        try visitor.visitSingularInt64Field(value: _storage._counter, fieldNumber: 1)
      }
      if !_storage._source.isEmpty {
        try visitor.visitSingularStringField(value: _storage._source, fieldNumber: 2)
      }
      if _storage._fee != 0 {
        try visitor.visitSingularInt64Field(value: _storage._fee, fieldNumber: 3)
      }
      if _storage._gasLimit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gasLimit, fieldNumber: 4)
      }
      if _storage._storageLimit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._storageLimit, fieldNumber: 5)
      }
      if _storage._kind != .endorsement {
        try visitor.visitSingularEnumField(value: _storage._kind, fieldNumber: 7)
      }
      switch _storage._operationData {
      case .revealOperationData(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .transactionOperationData(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tezos_Proto_Operation, rhs: TW_Tezos_Proto_Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._counter != rhs_storage._counter {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._fee != rhs_storage._fee {return false}
        if _storage._gasLimit != rhs_storage._gasLimit {return false}
        if _storage._storageLimit != rhs_storage._storageLimit {return false}
        if _storage._kind != rhs_storage._kind {return false}
        if _storage._operationData != rhs_storage._operationData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tezos_Proto_Operation.OperationKind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENDORSEMENT"),
    7: .same(proto: "REVEAL"),
    8: .same(proto: "TRANSACTION"),
  ]
}

extension TW_Tezos_Proto_TransactionOperationData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionOperationData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "destination"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.destination)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.destination.isEmpty {
      try visitor.visitSingularStringField(value: self.destination, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tezos_Proto_TransactionOperationData, rhs: TW_Tezos_Proto_TransactionOperationData) -> Bool {
    if lhs.destination != rhs.destination {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tezos_Proto_RevealOperationData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RevealOperationData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.publicKey)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.publicKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tezos_Proto_RevealOperationData, rhs: TW_Tezos_Proto_RevealOperationData) -> Bool {
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
