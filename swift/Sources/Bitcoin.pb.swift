// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Bitcoin.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Bitcoin_Proto_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transaction data format version.
  public var version: Int32 = 0

  /// The block number or timestamp at which this transaction is unlocked.
  public var lockTime: UInt32 = 0

  /// A list of 1 or more transaction inputs or sources for coins.
  public var inputs: [TW_Bitcoin_Proto_TransactionInput] = []

  /// A list of 1 or more transaction outputs or destinations for coins
  public var outputs: [TW_Bitcoin_Proto_TransactionOutput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Bitcoin transaction input.
public struct TW_Bitcoin_Proto_TransactionInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Reference to the previous transaction's output.
  public var previousOutput: TW_Bitcoin_Proto_OutPoint {
    get {return _storage._previousOutput ?? TW_Bitcoin_Proto_OutPoint()}
    set {_uniqueStorage()._previousOutput = newValue}
  }
  /// Returns true if `previousOutput` has been explicitly set.
  public var hasPreviousOutput: Bool {return _storage._previousOutput != nil}
  /// Clears the value of `previousOutput`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousOutput() {_uniqueStorage()._previousOutput = nil}

  /// Transaction version as defined by the sender.
  public var sequence: UInt32 {
    get {return _storage._sequence}
    set {_uniqueStorage()._sequence = newValue}
  }

  /// Computational script for confirming transaction authorization.
  public var script: Data {
    get {return _storage._script}
    set {_uniqueStorage()._script = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Bitcoin transaction out-point reference.
public struct TW_Bitcoin_Proto_OutPoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The hash of the referenced transaction.
  public var hash: Data = SwiftProtobuf.Internal.emptyData

  /// The index of the specific output in the transaction.
  public var index: UInt32 = 0

  /// Transaction version as defined by the sender.
  public var sequence: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Bitcoin transaction output.
public struct TW_Bitcoin_Proto_TransactionOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transaction amount.
  public var value: Int64 = 0

  /// Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
  public var script: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Bitcoin_Proto_UnspentTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var outPoint: TW_Bitcoin_Proto_OutPoint {
    get {return _storage._outPoint ?? TW_Bitcoin_Proto_OutPoint()}
    set {_uniqueStorage()._outPoint = newValue}
  }
  /// Returns true if `outPoint` has been explicitly set.
  public var hasOutPoint: Bool {return _storage._outPoint != nil}
  /// Clears the value of `outPoint`. Subsequent reads from it will return its default value.
  public mutating func clearOutPoint() {_uniqueStorage()._outPoint = nil}

  public var script: Data {
    get {return _storage._script}
    set {_uniqueStorage()._script = newValue}
  }

  public var amount: Int64 {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Input data necessary to create a signed transaction.
public struct TW_Bitcoin_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hash type to use when signing.
  public var hashType: UInt32 = 0

  /// Amount to send.
  public var amount: Int64 = 0

  /// Transaction fee per byte.
  public var byteFee: Int64 = 0

  /// Recipient's address.
  public var toAddress: String = String()

  /// Change address.
  public var changeAddress: String = String()

  /// Available private keys.
  public var privateKey: [Data] = []

  /// Available redeem scripts indexed by script hash.
  public var scripts: Dictionary<String,Data> = [:]

  /// Available unspent transaction outputs.
  public var utxo: [TW_Bitcoin_Proto_UnspentTransaction] = []

  /// If sending max amount
  public var useMaxAmount: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

//// Describes a preliminary transaction plan.
public struct TW_Bitcoin_Proto_TransactionPlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Amount to be received at the other end.
  public var amount: Int64 = 0

  //// Maximum available amount.
  public var availableAmount: Int64 = 0

  //// Estimated transaction fee.
  public var fee: Int64 = 0

  //// Change.
  public var change: Int64 = 0

  //// Selected unspent transaction outputs.
  public var utxos: [TW_Bitcoin_Proto_UnspentTransaction] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Transaction signing output.
public struct TW_Bitcoin_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Resulting transaction. Note that the amount may be different than the requested amount to account for fees and available funds.
  public var transaction: TW_Bitcoin_Proto_Transaction {
    get {return _storage._transaction ?? TW_Bitcoin_Proto_Transaction()}
    set {_uniqueStorage()._transaction = newValue}
  }
  /// Returns true if `transaction` has been explicitly set.
  public var hasTransaction: Bool {return _storage._transaction != nil}
  /// Clears the value of `transaction`. Subsequent reads from it will return its default value.
  public mutating func clearTransaction() {_uniqueStorage()._transaction = nil}

  /// Signed and encoded transaction bytes.
  public var encoded: Data {
    get {return _storage._encoded}
    set {_uniqueStorage()._encoded = newValue}
  }

  /// Total transaction fees.
  public var fee: Int64 {
    get {return _storage._fee}
    set {_uniqueStorage()._fee = newValue}
  }

  /// Maximum spendable amount.
  public var maxAmount: Int64 {
    get {return _storage._maxAmount}
    set {_uniqueStorage()._maxAmount = newValue}
  }

  /// Transaction id
  public var transactionID: String {
    get {return _storage._transactionID}
    set {_uniqueStorage()._transactionID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Bitcoin.Proto"

extension TW_Bitcoin_Proto_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "lockTime"),
    3: .same(proto: "inputs"),
    4: .same(proto: "outputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularSInt32Field(value: &self.version)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.lockTime)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.outputs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularSInt32Field(value: self.version, fieldNumber: 1)
    }
    if self.lockTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.lockTime, fieldNumber: 2)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 3)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Bitcoin_Proto_Transaction, rhs: TW_Bitcoin_Proto_Transaction) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.lockTime != rhs.lockTime {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Bitcoin_Proto_TransactionInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "previousOutput"),
    2: .same(proto: "sequence"),
    3: .same(proto: "script"),
  ]

  fileprivate class _StorageClass {
    var _previousOutput: TW_Bitcoin_Proto_OutPoint? = nil
    var _sequence: UInt32 = 0
    var _script: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _previousOutput = source._previousOutput
      _sequence = source._sequence
      _script = source._script
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._previousOutput)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._sequence)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._script)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._previousOutput {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._sequence != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._sequence, fieldNumber: 2)
      }
      if !_storage._script.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._script, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Bitcoin_Proto_TransactionInput, rhs: TW_Bitcoin_Proto_TransactionInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._previousOutput != rhs_storage._previousOutput {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._script != rhs_storage._script {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Bitcoin_Proto_OutPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutPoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "index"),
    3: .same(proto: "sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.hash)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.index)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.sequence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 1)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 2)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt32Field(value: self.sequence, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Bitcoin_Proto_OutPoint, rhs: TW_Bitcoin_Proto_OutPoint) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.index != rhs.index {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Bitcoin_Proto_TransactionOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "script"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.value)
      case 2: try decoder.decodeSingularBytesField(value: &self.script)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 1)
    }
    if !self.script.isEmpty {
      try visitor.visitSingularBytesField(value: self.script, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Bitcoin_Proto_TransactionOutput, rhs: TW_Bitcoin_Proto_TransactionOutput) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.script != rhs.script {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Bitcoin_Proto_UnspentTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnspentTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "out_point"),
    2: .same(proto: "script"),
    3: .same(proto: "amount"),
  ]

  fileprivate class _StorageClass {
    var _outPoint: TW_Bitcoin_Proto_OutPoint? = nil
    var _script: Data = SwiftProtobuf.Internal.emptyData
    var _amount: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _outPoint = source._outPoint
      _script = source._script
      _amount = source._amount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._outPoint)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._script)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._amount)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._outPoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._script.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._script, fieldNumber: 2)
      }
      if _storage._amount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._amount, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Bitcoin_Proto_UnspentTransaction, rhs: TW_Bitcoin_Proto_UnspentTransaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._outPoint != rhs_storage._outPoint {return false}
        if _storage._script != rhs_storage._script {return false}
        if _storage._amount != rhs_storage._amount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Bitcoin_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hash_type"),
    2: .same(proto: "amount"),
    3: .standard(proto: "byte_fee"),
    4: .standard(proto: "to_address"),
    5: .standard(proto: "change_address"),
    10: .standard(proto: "private_key"),
    11: .same(proto: "scripts"),
    12: .same(proto: "utxo"),
    13: .standard(proto: "use_max_amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.hashType)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 3: try decoder.decodeSingularInt64Field(value: &self.byteFee)
      case 4: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 5: try decoder.decodeSingularStringField(value: &self.changeAddress)
      case 10: try decoder.decodeRepeatedBytesField(value: &self.privateKey)
      case 11: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &self.scripts)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.utxo)
      case 13: try decoder.decodeSingularBoolField(value: &self.useMaxAmount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hashType != 0 {
      try visitor.visitSingularUInt32Field(value: self.hashType, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    if self.byteFee != 0 {
      try visitor.visitSingularInt64Field(value: self.byteFee, fieldNumber: 3)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 4)
    }
    if !self.changeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.changeAddress, fieldNumber: 5)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.privateKey, fieldNumber: 10)
    }
    if !self.scripts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: self.scripts, fieldNumber: 11)
    }
    if !self.utxo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.utxo, fieldNumber: 12)
    }
    if self.useMaxAmount != false {
      try visitor.visitSingularBoolField(value: self.useMaxAmount, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Bitcoin_Proto_SigningInput, rhs: TW_Bitcoin_Proto_SigningInput) -> Bool {
    if lhs.hashType != rhs.hashType {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.byteFee != rhs.byteFee {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.changeAddress != rhs.changeAddress {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.scripts != rhs.scripts {return false}
    if lhs.utxo != rhs.utxo {return false}
    if lhs.useMaxAmount != rhs.useMaxAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Bitcoin_Proto_TransactionPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionPlan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "available_amount"),
    3: .same(proto: "fee"),
    4: .same(proto: "change"),
    5: .same(proto: "utxos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 2: try decoder.decodeSingularInt64Field(value: &self.availableAmount)
      case 3: try decoder.decodeSingularInt64Field(value: &self.fee)
      case 4: try decoder.decodeSingularInt64Field(value: &self.change)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.utxos)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 1)
    }
    if self.availableAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.availableAmount, fieldNumber: 2)
    }
    if self.fee != 0 {
      try visitor.visitSingularInt64Field(value: self.fee, fieldNumber: 3)
    }
    if self.change != 0 {
      try visitor.visitSingularInt64Field(value: self.change, fieldNumber: 4)
    }
    if !self.utxos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.utxos, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Bitcoin_Proto_TransactionPlan, rhs: TW_Bitcoin_Proto_TransactionPlan) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.availableAmount != rhs.availableAmount {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.change != rhs.change {return false}
    if lhs.utxos != rhs.utxos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Bitcoin_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .same(proto: "encoded"),
    3: .same(proto: "fee"),
    4: .standard(proto: "max_amount"),
    5: .standard(proto: "transaction_id"),
  ]

  fileprivate class _StorageClass {
    var _transaction: TW_Bitcoin_Proto_Transaction? = nil
    var _encoded: Data = SwiftProtobuf.Internal.emptyData
    var _fee: Int64 = 0
    var _maxAmount: Int64 = 0
    var _transactionID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
      _encoded = source._encoded
      _fee = source._fee
      _maxAmount = source._maxAmount
      _transactionID = source._transactionID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._transaction)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._encoded)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._fee)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._maxAmount)
        case 5: try decoder.decodeSingularStringField(value: &_storage._transactionID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._transaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._encoded.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._encoded, fieldNumber: 2)
      }
      if _storage._fee != 0 {
        try visitor.visitSingularInt64Field(value: _storage._fee, fieldNumber: 3)
      }
      if _storage._maxAmount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxAmount, fieldNumber: 4)
      }
      if !_storage._transactionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transactionID, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Bitcoin_Proto_SigningOutput, rhs: TW_Bitcoin_Proto_SigningOutput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._encoded != rhs_storage._encoded {return false}
        if _storage._fee != rhs_storage._fee {return false}
        if _storage._maxAmount != rhs_storage._maxAmount {return false}
        if _storage._transactionID != rhs_storage._transactionID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
