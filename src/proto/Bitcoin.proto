syntax = "proto3";

package TW.Bitcoin.Proto;
option java_package = "wallet.core.jni.proto";

import "Common.proto";

message Transaction {
    // Transaction data format version.
    sint32 version = 1;

    // The block number or timestamp at which this transaction is unlocked.
    uint32 lockTime = 2;

    // A list of 1 or more transaction inputs or sources for coins.
    repeated TransactionInput inputs = 3;

    // A list of 1 or more transaction outputs or destinations for coins
    repeated TransactionOutput outputs = 4;
}

// Bitcoin transaction input.
message TransactionInput {
    // Reference to the previous transaction's output.
    OutPoint previousOutput = 1;

    // Transaction version as defined by the sender.
    uint32 sequence = 2;

    // Computational script for confirming transaction authorization.
    bytes script = 3;
}

// Bitcoin transaction out-point reference.
message OutPoint {
    // The hash of the referenced transaction.
    bytes hash = 1;

    // The index of the specific output in the transaction.
    uint32 index = 2;

    // Transaction version as defined by the sender.
    uint32 sequence = 3;
}

// Bitcoin transaction output.
message TransactionOutput {
    // Transaction amount.
    int64 value = 1;

    // Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
    bytes script = 2;
}

// An unspent transaction output, that can serve as input to a transaction
message UnspentTransaction {
    // The unspent output
    OutPoint out_point = 1;

    // Script for claiming this UTXO
    bytes script = 2;

    // Amount of the UTXO
    int64 amount = 3;
}

// Input data necessary to create a signed transaction.
message SigningInput {
    // Hash type to use when signing.
    uint32 hash_type = 1;

    // Amount to send.  Transaction created will have this amount in its output, 
    // except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
    // If amount is equal or more than the available amount, also max amount will be used.
    int64 amount = 2;

    // Transaction fee per byte.
    int64 byte_fee = 3;

    // Recipient's address.
    string to_address = 4;

    // Change address.
    string change_address = 5;

    // Available private keys.
    repeated bytes private_key = 6;

    // Available redeem scripts indexed by script hash.
    map<string, bytes> scripts = 7;

    // Available unspent transaction outputs.
    repeated UnspentTransaction utxo = 8;

    // If sending max amount.
    bool use_max_amount = 9;

    // Coin type (forks).
    uint32 coin_type = 10;

    // Optional transaction plan
    TransactionPlan plan = 11;

    // Optional lockTime, default value 0 means no time locking.
    // If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
    // Otherwise, the transaction may not be added to a block until after `lockTime`.
    //  value  < 500000000 : Block number at which this transaction is unlocked
    //  value >= 500000000 : UNIX timestamp at which this transaction is unlocked
    uint32 lock_time = 12;

    // Optional zero-amount, OP_RETURN output
    bytes output_op_return = 13;
}

// Describes a preliminary transaction plan.
message TransactionPlan {
    // Amount to be received at the other end.
    int64 amount = 1;

    // Maximum available amount.
    int64 available_amount = 2;

    // Estimated transaction fee.
    int64 fee = 3;

    // Change.
    int64 change = 4;

    // Selected unspent transaction outputs.
    repeated UnspentTransaction utxos = 5;

    // Zcash branch id
    bytes branch_id = 6;

    // Optional error
    Common.Proto.SigningError error = 7;

    // Optional zero-amount, OP_RETURN output
    bytes output_op_return = 8;
};

// Transaction signing output.
message SigningOutput {
    // Resulting transaction. Note that the amount may be different than the requested amount to account for fees and available funds.
    Transaction transaction = 1;

    // Signed and encoded transaction bytes.
    bytes encoded = 2;

    // Transaction id
    string transaction_id = 3;

    // Optional error
    Common.Proto.SigningError error = 4;
    // error description
    string error_message = 5;
}

message HashPublicKey {
    /// Pre-image data hash that will be used for signing
    bytes data_hash = 1;

    /// public key hash used for signing
    bytes public_key_hash = 2;
}

/// Transaction pre-signing output
message PreSigningOutput {
    /// hash, public key list
    repeated HashPublicKey hash_public_keys = 1;

    /// error code, 0 is ok, other codes will be treated as errors
    Common.Proto.SigningError error = 2;

    /// error description
    string error_message = 3;
}