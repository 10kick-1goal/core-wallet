syntax = "proto3";

package TW.Decred.Proto;
option java_package = "wallet.core.jni.proto";

import "Bitcoin.proto";
import "Common.proto";

message Transaction {
    /// Serialization format
    uint32 serializeType = 1;

    /// Transaction data format version
    uint32 version = 2;

    // A list of 1 or more transaction inputs or sources for coins.
    repeated TransactionInput inputs = 3;

    // A list of 1 or more transaction outputs or destinations for coins
    repeated TransactionOutput outputs = 4;

    /// The time when a transaction can be spent (usually zero, in which case it has no effect).
    uint32 lockTime = 5;

    /// The block height at which the transaction expires and is no longer valid.
    uint32 expiry = 6;
}

// Decred transaction input.
message TransactionInput {
    // Reference to the previous transaction's output.
    Bitcoin.Proto.OutPoint previousOutput = 1;

    // Transaction version as defined by the sender.
    uint32 sequence = 2;

	int64 valueIn = 3;
	uint32 blockHeight = 4;
	uint32 blockIndex = 5;

    // Computational script for confirming transaction authorization.
    bytes script = 6;
}

// Decred transaction output.
message TransactionOutput {
    // Transaction amount.
    int64 value = 1;

    /// Transaction output version.
    uint32 version = 2;

    // Usually contains the public key as a Decred script setting up conditions to claim this output.
    bytes script = 3;
}

// Transaction signing output.
message SigningOutput {
    // Resulting transaction. Note that the amount may be different than the requested amount to account for fees and available funds.
    Transaction transaction = 1;

    // Signed and encoded transaction bytes.
    bytes encoded = 2;

    // Transaction id
    string transaction_id = 3;

    // Optional error
    Common.Proto.SigningError error = 4;
}
