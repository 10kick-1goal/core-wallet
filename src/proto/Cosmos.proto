syntax = "proto3";

package TW.Cosmos.Proto;
option java_package = "wallet.core.jni.proto";

message Amount {
    string denom = 1;
    int64 amount = 2;
}

message Fee {
    repeated Amount amounts = 1;
    uint64 gas = 2;
}

enum BroadcastMode {
    BLOCK = 0; // Wait for the tx to pass/fail CheckTx, DeliverTx, and be committed in a block
    SYNC = 1;  // Wait for the tx to pass/fail CheckTx
    ASYNC = 2; // Don't wait for pass/fail CheckTx; send and return tx immediately
}

message Message {
    // cosmos-sdk/MsgSend
    message Send {
        string from_address = 1;
        string to_address = 2;
        repeated Amount amounts = 3;
        string type_prefix = 4;
    }

    // cosmos-sdk/MsgDelegate to stake
    message Delegate {
        string delegator_address = 1;
        string validator_address = 2;
        Amount amount = 3;
        string type_prefix = 4;
    }

    // cosmos-sdk/MsgUndelegate to unstake
    message Undelegate {
        string delegator_address = 1;
        string validator_address = 2;
        Amount amount = 3;
        string type_prefix = 4;
    }

    // cosmos-sdk/MsgBeginRedelegate
    message BeginRedelegate {
        string delegator_address = 1;
        string validator_src_address = 2;
        string validator_dst_address = 3;
        Amount amount = 4;
        string type_prefix = 5;
    }

    // cosmos-sdk/MsgWithdrawDelegationReward
    message WithdrawDelegationReward {
        string delegator_address = 1;
        string validator_address = 2;
        string type_prefix = 3;
    }

    message RawJSON {
        string type = 1;
        string value = 2;
    }

    oneof message_oneof {
        Send send_coins_message = 1;
        Delegate stake_message = 2;
        Undelegate unstake_message = 3;
        BeginRedelegate restake_message = 4;
        WithdrawDelegationReward withdraw_stake_reward_message = 5;
        RawJSON raw_json_message = 6;
    }
}

// Input data necessary to create a signed order.
message SigningInput {
    uint64 account_number = 1;
    string chain_id = 2;
    Fee fee = 3;
    string memo = 4;
    uint64 sequence = 5; 

    bytes private_key = 6;

    repeated Message messages = 7;

    BroadcastMode mode = 8;
}

// Transaction signing output.
message SigningOutput {
    // Signature
    bytes signature = 1;
    // Signed transaction in JSON.
    string json = 2;
}
