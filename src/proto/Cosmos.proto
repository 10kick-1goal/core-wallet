syntax = "proto3";

package TW.Cosmos.Proto;
option java_package = "wallet.core.jni.proto";

message Amount {
    string denom = 1;
    int64 amount = 2;
}

message Fee {
    repeated Amount amounts = 1;
    uint64 gas = 2;
}

// Block height, a revision and block height tuple.
// A height can be compared against another Height for the purposes of updating and freezing clients
message Height {
    // the revision that the client is currently on
    uint64 revision_number = 1;
    // the height within the given revision
    uint64 revision_height = 2;
}

enum BroadcastMode {
    BLOCK = 0; // Wait for the tx to pass/fail CheckTx, DeliverTx, and be committed in a block
    SYNC = 1;  // Wait for the tx to pass/fail CheckTx
    ASYNC = 2; // Don't wait for pass/fail CheckTx; send and return tx immediately
}

message Message {
    // cosmos-sdk/MsgSend
    message Send {
        string from_address = 1;
        string to_address = 2;
        repeated Amount amounts = 3;
        string type_prefix = 4;
    }

    // cosmos-sdk/MsgTransfer, IBC transfer
    message Transfer {
        // IBC port, e.g. "transfer"
        string source_port = 1;
        // IBC connection channel, e.g. "channel-141", see apis /ibc/applications/transfer/v1beta1/denom_traces (connections) or /node_info (own channel)
        string source_channel = 2;
        Amount token = 3;
        string sender = 4;
        string receiver = 5;
        // Timeout block height. Either timeout height or timestamp should be set.
        // Recommendation is to set height, to rev. 1 and block current + 1000 (see api /blocks/latest)
        Height timeout_height = 6;
        // Timeout timestamp (in nanoseconds) relative to the current block timestamp.  Either timeout height or timestamp should be set.
        uint64 timeout_timestamp = 7;
    }

    // cosmos-sdk/MsgDelegate to stake
    message Delegate {
        string delegator_address = 1;
        string validator_address = 2;
        Amount amount = 3;
        string type_prefix = 4;
    }

    // cosmos-sdk/MsgUndelegate to unstake
    message Undelegate {
        string delegator_address = 1;
        string validator_address = 2;
        Amount amount = 3;
        string type_prefix = 4;
    }

    // cosmos-sdk/MsgBeginRedelegate
    message BeginRedelegate {
        string delegator_address = 1;
        string validator_src_address = 2;
        string validator_dst_address = 3;
        Amount amount = 4;
        string type_prefix = 5;
    }

    // cosmos-sdk/MsgWithdrawDelegationReward
    message WithdrawDelegationReward {
        string delegator_address = 1;
        string validator_address = 2;
        string type_prefix = 3;
    }

    message RawJSON {
        string type = 1;
        string value = 2;
    }

    oneof message_oneof {
        Send send_coins_message = 1;
        Transfer transfer_tokens_message = 2;
        Delegate stake_message = 3;
        Undelegate unstake_message = 4;
        BeginRedelegate restake_message = 5;
        WithdrawDelegationReward withdraw_stake_reward_message = 6;
        RawJSON raw_json_message = 7;
    }
}

enum SigningMode {
    JSON = 0;        // JSON format, Pre-Stargate
    Protobuf = 1;    // Protobuf-serialized (binary), Stargate
}

// Input data necessary to create a signed order.
message SigningInput {
    // Specify if Stargate or earlier serialization is used
    SigningMode signing_mode = 1;

    uint64 account_number = 2;
    string chain_id = 3;
    Fee fee = 4;
    string memo = 5;
    uint64 sequence = 6; 

    bytes private_key = 7;

    repeated Message messages = 8;

    BroadcastMode mode = 9;
}

// Transaction signing output.
message SigningOutput {
    // Signature
    bytes signature = 1;

    // Signed transaction in JSON (pre-Stargate case)
    string json = 2;

    // Signed transaction containing protobuf encoded, Base64-encoded form (Stargate case),
    // wrapped in a ready-to-broadcast json.
    string serialized = 3;

    // Set in case of error
    string error = 4;
}
