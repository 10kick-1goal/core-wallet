syntax = "proto3";

package TW.Cardano.Proto;
option java_package = "wallet.core.jni.proto";

// A Cardano transaction
message Transaction {
    // A list of 1 or more transaction inputs or sources for coins.
    repeated TransactionInput inputs = 1;

    // A list of 1 or more transaction outputs or destinations for coins
    repeated TransactionOutput outputs = 2;
}

// Cardano transaction input.
message TransactionInput {
    // Reference to the previous transaction's output.
    OutPoint previousOutput = 1;
}

// Cardano transaction out-point reference.
message OutPoint {
    // The hash of the referenced transaction.
    bytes txid = 1;

    // The index of the specific output in the transaction.
    uint32 index = 2;
}

// Cardano transaction output.
message TransactionOutput {
    // To address
    string to_address = 1;

    // Transaction amount.
    int64 value = 2;
}

message UnspentTransaction {
    OutPoint out_point = 1;
    int64 amount = 2;

    // Address of the UTXO (to address in the output, from address if used in the input)
    string address = 3;
}

// Input data necessary to create a signed transaction.
message SigningInput {
    // Amount to send to recipient.
    int64 amount = 1;

    // Recipient's address.
    string to_address = 2;

    // Change address.
    string change_address = 3;

    // Available private keys.  Private keys must match the addresses from the UTXO's.  Duplicates can be dropped, order does not matter.
    repeated bytes private_key = 4;

    // Available unspent transaction outputs.
    repeated UnspentTransaction utxo = 5;

    // Set if requesting sending max amount.  Overrides amount (to max minus fee).
    bool use_max_amount = 13;

}

// Describes a preliminary transaction plan.
message TransactionPlan {
    // Amount to be received at the other end.
    int64 amount = 1;

    // Maximum available amount.
    int64 available_amount = 2;

    // Computed total transaction fee.
    int64 fee = 3;

    // Change.
    int64 change = 4;

    // Selected unspent transaction outputs.
    repeated UnspentTransaction utxo = 5;

    // Error message in case of error
    string error = 6;
};

// Transaction signing output.
message SigningOutput {
    // Signed and encoded transaction bytes.
    bytes encoded = 1;

    // Transaction id
    string transaction_id = 2;

    // Error message in case of error
    string error = 4;
}
