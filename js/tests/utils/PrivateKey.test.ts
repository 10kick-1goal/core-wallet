import { expect } from 'chai';
import 'mocha';

import { bufToHex } from '../Utils';
import { Hash, PrivateKey, Curve } from '../../lib';

describe('PrivateKey', () => {

    const validPrivateKeyData = new Uint8Array([0xaf, 0xee, 0xfc, 0xa7, 0x4d, 0x9a, 0x32, 0x5c, 0xf1, 0xd6, 0xb6, 0x91, 0x1d, 0x61, 0xa6, 0x5c, 0x32, 0xaf, 0xa8, 0xe0, 0x2b, 0xd5, 0xe7, 0x8e, 0x2e, 0x4a, 0xc2, 0x91, 0x0b, 0xab, 0x45, 0xf5]);

    it('test create', () => {
        const privateKey = PrivateKey.create();
        const data = privateKey.data();
        expect(data.length).to.equal(32);
    });

    it('test invalid', () => {
        const bytes = new Uint8Array([0xde, 0xad, 0xbe, 0xef]);
        expect(() => PrivateKey.createWithData(bytes)).to.throw;
    });

    it('test isValid for valid data', () => {
        expect(PrivateKey.isValid(validPrivateKeyData)).to.be.true;
    });

    it('test valid', () => {
        expect(PrivateKey.isValid(validPrivateKeyData)).to.be.true;
        let privateKey: PrivateKey | null = null;
        try {
            privateKey = PrivateKey.createWithData(validPrivateKeyData);
        } catch (ex) {

        }
        expect(privateKey).to.not.be.null;
    });

    it('test PublicKey compressed', () => {
        let privateKey: PrivateKey | null = null;
        try {
            privateKey = PrivateKey.createWithData(validPrivateKeyData);
        } catch (ex) {

        }
        expect(privateKey).to.not.be.null;

        const publicKey = (privateKey as PrivateKey).getPublicKeySecp256k1(true);
        const valid = new Uint8Array([0x03, 0x99, 0xc6, 0xf5, 0x1a, 0xd6, 0xf9, 0x8c, 0x9c, 0x58, 0x3f, 0x8e, 0x92, 0xbb, 0x77, 0x58, 0xab, 0x2c, 0xa9, 0xa0, 0x41, 0x10, 0xc0, 0xa1, 0x12, 0x6e, 0xc4, 0x3e, 0x54, 0x53, 0xd1, 0x96, 0xc1]);
        expect(bufToHex(valid)).to.equal(bufToHex(publicKey.data()));
    });

    it('test sign', () => {
        const validSign = new Uint8Array([0x87, 0x20, 0xa4, 0x6b, 0x5b, 0x39, 0x63, 0x79, 0x0d, 0x94, 0xbc, 0xc6, 0x1a, 0xd5, 0x7c, 0xa0, 0x2f, 0xd1, 0x53, 0x58, 0x43, 0x15, 0xbf, 0xa1, 0x61, 0xed, 0x34, 0x55, 0xe3, 0x36, 0xba, 0x62, 0x4d, 0x68, 0xdf, 0x01, 0x0e, 0xd9, 0x34, 0xb8, 0x79, 0x2c, 0x5b, 0x6a, 0x57, 0xba, 0x86, 0xc3, 0xda, 0x31, 0xd0, 0x39, 0xf9, 0x61, 0x2b, 0x44, 0xd1, 0xbf, 0x05, 0x41, 0x32, 0x25, 0x4d, 0xe9, 0x01]);
        const data = Hash.keccak256(Buffer.from('hello', 'utf-8'));
        const sign = PrivateKey.createWithData(validPrivateKeyData).sign(data, Curve.SECP256K1);
        expect(bufToHex(sign)).to.equal(bufToHex(validSign));
    });

});
