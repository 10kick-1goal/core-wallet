#ifndef NAPI_TW_<%= entity.name.upcase %>_H
#define NAPI_TW_<%= entity.name.upcase %>_H

<% require 'set' -%>
<%  includes = SortedSet.new([entity.name]) -%>
<%  entity.static_methods.each do |method| -%>
<%    includes << method.return_type.name if method.return_type.is_struct || method.return_type.is_class -%>
<%    method.parameters.each do |param| -%>
<%      includes << param.type.name if param.type.is_struct || param.type.is_class -%>
<%    end -%>
<%  end -%>
<%  includes.each do |include| -%>
#include <TrustWalletCore/TW<%= include %>.h>
<%  end -%>

#include <TrustWalletCore/TWBase.h>
#include "../TWNapi.h"

using namespace Napi;

<%# Constructor declarations -%>
<% entity.static_methods.each do |method| -%>
<%   next unless method.name.start_with?('Create') -%>
External<TW<%= entity.name %>> <%= NapiHelper.function_name(entity: entity, function: method) %>(const CallbackInfo& info);

<% end -%>
<%# Destructor declarations -%>
<% entity.methods.each do |method| -%>
<%   next unless method.name.start_with?('Delete') -%>
void <%= NapiHelper.function_name(entity: entity, function: method) %>(const CallbackInfo& info);

<% end -%>
<%# Initializer declarations -%>
<% entity.static_methods.each do |method| -%>
<%   next unless method.name.start_with?('Init') -%>
Value <%= NapiHelper.function_name(entity: entity, function: method) %>(const CallbackInfo& info);

<% end -%>
<%# Static property declarations -%>
<% entity.static_properties.each do |property| -%>
<%=  render('napi/method_prototype.erb', { method: property }) %>;

<% end -%>
<%# Static method declarations -%>
<%  entity.static_methods.each do |method| -%>
<%    next if method.name.start_with?('Create') || method.name.start_with?('Init') -%>
<%=   render('napi/method_prototype.erb', { method: method }) %>;

<%  end -%>
<%# Property declarations -%>
<% entity.properties.each do |property| -%>
<%=  render('napi/method_prototype.erb', { method: property }) %>;

<% end -%>
<%# Method declarations -%>
<% entity.methods.each do |method| -%>
<%   next if method.name.start_with?('Delete') -%>
<%=  render('napi/method_prototype.erb', { method: method }) %>;

<% end -%>
<%  less = entity.static_methods.detect{ |i| i.name == 'Less' } -%>
<%  equal = entity.static_methods.detect{ |i| i.name == 'Equal' } -%>
<%  if !less.nil? && !equal.nil? -%>
<%=   render('napi/method_prototype.erb', { method: NapiHelper.compareMethod(entity) }) %>;

<%  end -%>

#endif // NAPI_TW_<%= entity.name.upcase %>_H