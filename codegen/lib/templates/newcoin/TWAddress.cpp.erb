// Copyright Â© 2017-2020 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

#include "../<%= format_name(coin) %>/Address.h"

#include <TrustWalletCore/TWPublicKey.h>
#include <TrustWalletCore/TW<%= format_name(coin) %>Address.h>

using namespace TW;
using namespace TW::<%= format_name(coin) %>;

// TODO: Adjust implementations below

bool TW<%= format_name(coin) %>AddressEqual(struct TW<%= format_name(coin) %>Address *_Nonnull lhs, struct TW<%= format_name(coin) %>Address *_Nonnull rhs) {
    return lhs->impl == rhs->impl;
}

bool TW<%= format_name(coin) %>AddressIsValidString(TWString *_Nonnull string) {
    auto s = reinterpret_cast<const std::string*>(string);
    return Address::isValid(*s);
}

struct TW<%= format_name(coin) %>Address *_Nullable TW<%= format_name(coin) %>AddressCreateWithString(TWString *_Nonnull string) {
    auto s = reinterpret_cast<const std::string*>(string);
    try {
        const auto address = Address(*s);
        return new TW<%= format_name(coin) %>Address{ std::move(address) };
    } catch (...) {
        return nullptr;
    }
}

struct TW<%= format_name(coin) %>Address *_Nonnull TW<%= format_name(coin) %>AddressCreateWithPublicKey(struct TWPublicKey *_Nonnull publicKey) {
    return new TW<%= format_name(coin) %>Address{ Address(publicKey->impl) };
}

void TW<%= format_name(coin) %>AddressDelete(struct TW<%= format_name(coin) %>Address *_Nonnull address) {
    delete address;
}

TWString *_Nonnull TW<%= format_name(coin) %>AddressDescription(struct TW<%= format_name(coin) %>Address *_Nonnull address) {
    const auto string = address->impl.string();
    return TWStringCreateWithUTF8Bytes(string.c_str());
}
