import { WalletCore } from '../WalletCore';

<%  has_string = entity.cases.all? { |c| !c.string.nil? } -%>
<%  type = entity.raw_type ? JsHelper.type(entity.raw_type) : 'int' -%>
<%  import_entity_name =  JsHelper.import_types_from_entity(entity) -%>
<%# Imports -%>
<% if !import_entity_name.empty? -%>
<%- import_entity_name.each do |type| -%>
import { <%= type %> } from './<%= type %>';
<%  end -%>


<% end -%>
export enum <%= entity.name %> {
<%# Cases -%>
<%  entity.cases.each_with_index do |c, i| -%>
    <%= JsHelper.format_constant(c.name) %><% unless c.value.nil? %> = <%= c.value %><% end %><% if i < entity.cases.size - 1 %>,<% else %>
}<% end %>
<%  end -%>

<% if JsHelper.enum_has_util(entity) -%>
export class <%= entity.name %>Util {

<%# Property declarations -%>
<%- entity.properties.each do |property| -%>
<%-     if [:uint64, :size].include? property.return_type.name %>
    public static <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters) %>): <%= JsHelper.type(property.return_type) %> {
        return Long.fromString(WalletCore.<%= NapiHelper.function_name(entity: entity, function: property) %>(<%= JsHelper.arguments(property.parameters) %>), true);
    }
<%-     else -%>
    public static <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters) %>): <%= JsHelper.type(property.return_type) %> {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: property) %>(<%= JsHelper.arguments(property.parameters) %>);
    }
<%-     end -%>
<%- end -%>
<%# Method declarations -%>
<%- entity.methods.each do |method| -%>
<%-   next if method.name.start_with?('Delete') -%>
<%-   if [:uint64, :size].include? method.return_type.name -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): <%= JsHelper.type(method.return_type) %> {
<%-     if method.parameters.length > 1 -%>
        return Long.fromString(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= method.parameters[0].name %>, <%= JsHelper.arguments(method.parameters.drop(1)) %>), true);
<%-     else -%>
        return Long.fromString(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= method.parameters[0].name %>), true);
<%-     end -%>
    }
<%-     else -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): <%= JsHelper.type(method.return_type) %> {
<%-     if method.parameters.length > 1 -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= method.parameters[0].name %>, <%= JsHelper.arguments(method.parameters.drop(1)) %>);
<%-     else -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= method.parameters[0].name %>);
<%-     end -%>
    }
<%-     end -%>
<%- end -%>
<%# toString -%>
<%  if has_string -%>
    public static toString(<%= entity.name.downcase %>: <%= entity.name %>): string {
        switch (<%= entity.name.downcase %>) {
<%    entity.cases.each do |c| -%>
            case <%= entity.name %>.<%= JsHelper.format_constant(c.name) %>: return <%= JsHelper.to_single_quotes(c.string) %>;
<%    end -%>
            default: return '';
        }
    }
<%  end -%>
}
<%  end -%>
