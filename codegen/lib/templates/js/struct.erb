import { WalletCore } from '../WalletCore';

<%  import_entity_name =  JsHelper.import_types_from_entity(entity) -%>
<%# Imports -%>
<% if !import_entity_name.empty? -%>
<%- import_entity_name.each do |type| -%>
<%= JsHelper.str_to_import(type) %>;
<% end -%>
<% end -%>

<%  less = entity.static_methods.detect{ |i| i.name == 'Less' } -%>
<%  equal = entity.static_methods.detect{ |i| i.name == 'Equal' } -%>

// Struct
export class <%= entity.name %> {

<%  if !entity.static_methods.detect{ |i| i.name.start_with?('Init') }.nil? -%>
    private nativeHandle: any;

    private constructor(nativeHandle: any) {
        this.nativeHandle = nativeHandle;
    }

    public static createWithNativeHandle(nativeHandle: any) {
        return new <%= entity.name %>(nativeHandle);
    }

    public getNativeHandle() {
        return this.nativeHandle;
    }

<% end -%>
<%# Constructor declarations -%>
<%- entity.static_methods.each do |method| -%>
<%-   next unless method.name.start_with?('Init') -%>
    public static <%= method.name %> (<%= JsHelper.parameters(method.parameters.drop(1)) %>): <%= entity.name %> | null {
        const result = WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters.drop(1)) %>);
        if (result === null || result === undefined) {
            return null;
        }
        return new <%= entity.name %>(result);
    }

<%- end -%>
<%# Static property declarations -%>
<%- entity.static_properties.each do |property| -%>
<%    if should_return_data(property) -%>
    public static <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters) %>): Uint8Array {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>);
    }
<%    elsif should_return_string(property) -%>
    public static <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters) %>): string {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>);
    }
<%    else -%>
    public static <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters) %>): <%= JsHelper.type(property.return_type) %> {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>);
    }
<%    end -%>

<%- end -%>
<%# Static method declarations -%>
<%- entity.static_methods.each do |method| -%>
<%-   next if method.name.start_with?('Init') -%>
<%    if should_return_data(method) -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): Uint8Array {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>);
    }
<%    elsif should_return_string(method) -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): string {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>);
    }
<%    elsif should_return_object(method) -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): <%= JsHelper.type(method.return_type) %> {
        return <%= JsHelper.type(method.return_type) %>.createWithNativeHandle(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>));
    }
<%    else -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): <%= JsHelper.type(method.return_type) %> {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>);
    }
<%    end -%>

<%- end -%>
<%# Property declarations -%>
<%- entity.properties.each do |property| -%>
<%    if should_return_data(property) -%>
    public <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters.drop(1)) %>): Uint8Array {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: property) %>(this.getNativeHandle());
    }
<%    elsif should_return_string(property) -%>
    public <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters.drop(1)) %>): string {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: property) %>(this.getNativeHandle());
    }
<%    else -%>
    public <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters.drop(1)) %>): <%= JsHelper.type(property.return_type) %> {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: property) %>(this.getNativeHandle());
    }
<%    end -%>

<%- end -%>
<%# Method declarations -%>
<%  entity.methods.each do |method| -%>
<%    next if method.name.start_with?('Delete') -%>
<%    if should_return_data(method) -%>
    public <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters.drop(1)) %>): Uint8Array {
<%      if method.parameters.length > 1 -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle(), <%= JsHelper.arguments(method.parameters.drop(1)) %>);
<%      else -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle());
<%      end -%>
    }
<%    elsif should_return_string(method) -%>
    public <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters.drop(1)) %>): string {
<%      if method.parameters.length > 1 -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle(), <%= JsHelper.arguments(method.parameters.drop(1)) %>);
<%      else -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle());
<%      end -%>
    }
<%    elsif should_return_object(method) -%>
    public <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters.drop(1)) %>): <%= JsHelper.type(method.return_type) %> {
<%      if method.parameters.length > 1 -%>
        return <%= JsHelper.type(method.return_type) %>.createWithNativeHandle(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle(), <%= JsHelper.arguments(method.parameters.drop(1)) %>));
<%      else -%>
        return <%= JsHelper.type(method.return_type) %>.createWithNativeHandle(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle()));
<%      end -%>
    }
<%    else -%>
    public <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters.drop(1)) %>): <%= JsHelper.type(method.return_type) %> {
<%      if method.parameters.length > 1 -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle(), <%= JsHelper.arguments(method.parameters.drop(1)) %>);
<%      else -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle());
<%      end -%>
    }
<%    end -%>

<%  end -%>
<%  if !less.nil? && !equal.nil? -%>
<%    compareMethod = JsHelper.compareMethod(entity) -%>
    public native <%= JsHelper.type(compareMethod.return_type) %> <%= JsHelper.format_name(compareMethod.name) %>(<%= JsHelper.parameters(compareMethod.parameters.drop(1)) %>);
<%  end -%>
}
