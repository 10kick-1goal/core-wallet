<%# Imports -%>
import { WalletCore } from '../WalletCore';
import { TW } from '../../proto/TrustWalletCore';
import * as Long from 'long';
<%  import_entity_name =  JsHelper.import_types_from_entity(entity) -%>
<% if !import_entity_name.empty? -%>

<%- import_entity_name.each do |type| -%>
import { <%= type %> } from './<%= type %>';
<%  end -%>
<% end -%>

// Class
export class <%= entity.name %> {

<%  if !entity.static_methods.detect{ |i| i.name.start_with?('Create') }.nil? -%>
    private readonly nativeHandle: External;

    private constructor(nativeHandle: External) {
        this.nativeHandle = nativeHandle;
    }

    public static createWithNativeHandle(nativeHandle: External) {
        return new <%= entity.name %>(nativeHandle);
    }

    public getNativeHandle() {
        return this.nativeHandle;
    }

<% end -%>
<%# Constructor declarations -%>
<% entity.static_methods.each do |method| -%>
<%   next unless method.name.start_with?('Create') -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): <%= entity.name %> {
        return new <%= entity.name %>(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>));
    }

<% end -%>
<%# Destructor declarations -%>
<% entity.methods.each do |method| -%>
<%   next unless method.name.start_with?('Delete') -%>
    public <%= JsHelper.format_name(method.name) %>(): void {
        WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle());
    }

<% end -%>
<%# Static property declarations -%>
<%  entity.static_properties.each do |property| -%>
<%    if [:uint64, :size].include? property.return_type.name -%>
    public static <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters) %>): Long {
        return Long.fromString(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>), true);
    }
<%    else -%>
    public static <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters) %>): <%= JsHelper.type(property.return_type) %> {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>);
    }
<%    end -%>

<% end -%>
<%# Static method declarations -%>
<%  entity.static_methods.each do |method| -%>
<%    next if method.name.start_with?('Create') -%>
<%    if should_return_object(method) -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): <%= JsHelper.type(method.return_type) %> {
        return <%= JsHelper.type(method.return_type) %>.createWithNativeHandle(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>));
    }
<%    elsif JsHelper.type(method.return_type).include? "Proto" -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): <%= JsHelper.type(method.return_type) %> {
        return <%= JsHelper.type(method.return_type) %>.decode(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>));
    }
<%    elsif [:uint64, :size].include? method.return_type.name -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): Long {
        return Long.fromString(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>), true);
    }
<%    else -%>
    public static <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters) %>): <%= JsHelper.type(method.return_type) %> {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(<%= JsHelper.arguments(method.parameters) %>);
    }
<%    end -%>

<%  end -%>
<%# Property declarations -%>
<%  entity.properties.each do |property| -%>
<%    if [:uint64, :size].include? property.return_type.name -%>
    public <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters.drop(1)) %>): Long {
        return Long.fromString(WalletCore.<%= NapiHelper.function_name(entity: entity, function: property) %>(this.getNativeHandle()), true);
    }
<%    else -%>
    public <%= JsHelper.format_name(property.name) %>(<%= JsHelper.parameters(property.parameters.drop(1)) %>): <%= JsHelper.type(property.return_type) %> {
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: property) %>(this.getNativeHandle());
    }
<%    end -%>

<%  end -%>
<%# Method declarations -%>
<%  entity.methods.each do |method| -%>
<%    next if method.name.start_with?('Delete') -%>
<%    if should_return_object(method) -%>
    public <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters.drop(1)) %>): <%= JsHelper.type(method.return_type) %> {

<%      if method.parameters.length > 1 -%>
        return <%= JsHelper.type(method.return_type) %>.createWithNativeHandle(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle(), <%= JsHelper.arguments(method.parameters.drop(1)) %>));
<%      else -%>
        return <%= JsHelper.type(method.return_type) %>.createWithNativeHandle(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle()));
<%      end -%>
    }
<%    elsif JsHelper.type(method.return_type).include? "Proto" -%>
    public <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters.drop(1)) %>): <%= JsHelper.type(method.return_type) %> {
<%      if method.parameters.length > 1 -%>
        return <%= JsHelper.type(method.return_type) %>.decode(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle(), <%= JsHelper.arguments(method.parameters.drop(1)) %>));
<%      else -%>
        return <%= JsHelper.type(method.return_type) %>.decode(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle()));
<%      end -%>
    }
<%    elsif [:uint64, :size].include? method.return_type.name -%>
    public <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters.drop(1)) %>): Long {

<%      if method.parameters.length > 1 -%>
        return Long.fromString(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle(), <%= JsHelper.arguments(method.parameters.drop(1)) %>), true);
<%      else -%>
        return Long.fromString(WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle()), true);
<%      end -%>
    }
<%    else -%>
    public <%= JsHelper.format_name(method.name) %>(<%= JsHelper.parameters(method.parameters.drop(1)) %>): <%= JsHelper.type(method.return_type) %> {

<%      if method.parameters.length > 1 -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle(), <%= JsHelper.arguments(method.parameters.drop(1)) %>);
<%      else -%>
        return WalletCore.<%= NapiHelper.function_name(entity: entity, function: method) %>(this.getNativeHandle());
<%      end -%>
    }
<%    end -%>

<%  end -%>
}
