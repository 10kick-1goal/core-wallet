<%
  method = locals[:method]
  if method.static
    arguments = locals[:arguments] || NapiHelper.arguments(method.parameters)
    call = render('napi/method_call.erb', { method: method, arguments: arguments })
  else
    instance = (method.entity.struct? ? '*' : '') + 'instance'
    arguments = locals[:arguments] || [instance] + NapiHelper.arguments(method.parameters.drop(1))
    call = render('napi/method_call.erb', { method: method, arguments: arguments })
  end

  # Method returns data
  if should_return_data(method) -%>
    TWData* twResult = <%= call %>;
<%  if method.return_type.is_nullable -%>
    if (twResult == nullptr) {
        Error::New(env, "Invalid input").ThrowAsJavaScriptException();
    }
<%  end -%>
    <%= NapiHelper.type(method.return_type) %> result = TWDataUint8Array(&env, twResult);
<%= render('napi/parameter_release.erb', { method: method }) -%>
    return result;
<%
  # Method returns a string
  elsif should_return_string(method) -%>
    TWString* twResult = <%= call %>;
<%  if method.return_type.is_nullable -%>
    if (twResult == nullptr) {
        Error::New(env, "Invalid input").ThrowAsJavaScriptException();
    }
<%  end -%>
    String result = TWStringJsString(&env, twResult);
<%= render('napi/parameter_release.erb', { method: method }) -%>
    return result;
<%
  # Method returns proto
  elsif method.return_type.is_proto -%>
    TWData* twResult = <%= call %>;
<%  if method.return_type.is_nullable -%>
    if (twResult == nullptr) {
        Error::New(env, "Invalid input").ThrowAsJavaScriptException();
    }
<%  end -%>
    Uint8Array result = TWDataUint8Array(&env, twResult);
<%= render('napi/parameter_release.erb', { method: method }) -%>
    return result;
<%
  # Method returns an object
  elsif method.return_type.is_struct || method.return_type.is_class || method.return_type.is_enum
    if method.return_type.is_struct -%>
    struct TW<%= method.return_type.name %> result = <%= call %>;
<%  elsif method.return_type.is_class -%>
    struct TW<%= method.return_type.name %> *result = <%= call %>;
<%  elsif method.return_type.is_enum -%>
    enum TW<%= method.return_type.name %> result = <%= call %>;
<%  else -%>
    TW<%= method.return_type.name %> *result = <%= call %>;
<%  end -%>
<%= render('napi/parameter_release.erb', { method: method }) -%>
<%  if method.return_type.is_struct -%>
    struct TW<%= method.return_type.name %>* returnInstance = new TW<%= method.return_type.name %>(result);

    return External<TW<%= method.return_type.name %>>::New(env, returnInstance, [](Env _env, void* data) {
        delete reinterpret_cast<TW<%= method.return_type.name %> *>(data);
    });
<%  elsif method.return_type.is_enum -%>
    return Number::New(env, (int) result);;
<%  else -%>
    if (result == nullptr) {
        return env.Null();
    }

    return External<TW<%= method.return_type.name %>>::New(env, result, [](Env _env, void* data) {
        TW<%= method.return_type.name %>Delete(reinterpret_cast<TW<%= method.return_type.name %> *>(data));
    });
<%  end
  # Method returns void
  elsif method.return_type.name == :void -%>
    <%= call %>;
<%= render('napi/parameter_release.erb', { method: method }) -%>
<%
  # Method returns unsigned 64 bit integer
  elsif [:size, :uint64].include? method.return_type.name -%>
    String returnValue = String::New(env, std::to_string(<%= call %>));
<%= render('napi/parameter_release.erb', { method: method }) -%>
    return returnValue;
<% 
  # Method returns a primitive
  else -%>
    <%= NapiHelper.type(method.return_type) %> resultValue = <%= NapiHelper.type(method.return_type) %>::New(env, <%= call %>);
<%= render('napi/parameter_release.erb', { method: method }) -%>
    return resultValue;
<%end -%>