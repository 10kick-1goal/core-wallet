// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.2
// source: Binance.proto

package binance

import (
	common "tw/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int64 SIZE-OF-ENCODED      // varint encoded length of the structure after encoding
	// 0xF0625DEE                  // prefix
	Msgs       [][]byte `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`             // array of size 1, containing the transaction message, which are one of the transaction type below
	Signatures [][]byte `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"` // array of size 1, containing the standard signature structure of the transaction sender
	Memo       string   `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`             // a short sentence of remark for the transaction, only for `Transfer` transactions.
	Source     int64    `protobuf:"varint,4,opt,name=source,proto3" json:"source,omitempty"`        // an identifier for tools triggerring this transaction, set to zero if unwilling to disclose.
	Data       []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`             // reserved for future use
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetMsgs() [][]byte {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *Transaction) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *Transaction) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Transaction) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *Transaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey        []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`                       // public key bytes of the signer address
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`                               // signature bytes, please check chain access section for signature generation
	AccountNumber int64  `protobuf:"varint,3,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"` // another identifier of signer, which can be read from chain by account REST API or RPC
	Sequence      int64  `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`                                // sequence number for the next transaction
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{1}
}

func (x *Signature) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signature) GetAccountNumber() int64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *Signature) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type TradeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0xCE6DC043           // prefix
	Sender      []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`            // originating address
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                    // order id, optional
	Symbol      string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`            // symbol for trading pair in full name of the tokens
	Ordertype   int64  `protobuf:"varint,4,opt,name=ordertype,proto3" json:"ordertype,omitempty"`     // only accept 2 for now, meaning limit order
	Side        int64  `protobuf:"varint,5,opt,name=side,proto3" json:"side,omitempty"`               // 1 for buy and 2 fory sell
	Price       int64  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`             // price of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
	Quantity    int64  `protobuf:"varint,7,opt,name=quantity,proto3" json:"quantity,omitempty"`       // quantity of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
	Timeinforce int64  `protobuf:"varint,8,opt,name=timeinforce,proto3" json:"timeinforce,omitempty"` // 1 for Good Till Expire(GTE) order and 3 for Immediate Or Cancel (IOC)
}

func (x *TradeOrder) Reset() {
	*x = TradeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeOrder) ProtoMessage() {}

func (x *TradeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeOrder.ProtoReflect.Descriptor instead.
func (*TradeOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{2}
}

func (x *TradeOrder) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *TradeOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TradeOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeOrder) GetOrdertype() int64 {
	if x != nil {
		return x.Ordertype
	}
	return 0
}

func (x *TradeOrder) GetSide() int64 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *TradeOrder) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeOrder) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradeOrder) GetTimeinforce() int64 {
	if x != nil {
		return x.Timeinforce
	}
	return 0
}

type CancelTradeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0x166E681B      // prefix
	Sender []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"` // originating address
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"` // symbol for trading pair in full name of the tokens
	Refid  string `protobuf:"bytes,3,opt,name=refid,proto3" json:"refid,omitempty"`   // order id to cancel
}

func (x *CancelTradeOrder) Reset() {
	*x = CancelTradeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTradeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTradeOrder) ProtoMessage() {}

func (x *CancelTradeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTradeOrder.ProtoReflect.Descriptor instead.
func (*CancelTradeOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{3}
}

func (x *CancelTradeOrder) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *CancelTradeOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CancelTradeOrder) GetRefid() string {
	if x != nil {
		return x.Refid
	}
	return ""
}

type SendOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs  []*SendOrder_Input  `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs []*SendOrder_Output `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *SendOrder) Reset() {
	*x = SendOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOrder) ProtoMessage() {}

func (x *SendOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOrder.ProtoReflect.Descriptor instead.
func (*SendOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{4}
}

func (x *SendOrder) GetInputs() []*SendOrder_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SendOrder) GetOutputs() []*SendOrder_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type TokenIssueOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0x17EFAB80      // prefix
	From        []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`                                   // owner address
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   // token name
	Symbol      string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`                               // token symbol, in full name with "-" suffix
	TotalSupply int64  `protobuf:"varint,4,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"` // total supply
	Mintable    bool   `protobuf:"varint,5,opt,name=mintable,proto3" json:"mintable,omitempty"`                          // mintable
}

func (x *TokenIssueOrder) Reset() {
	*x = TokenIssueOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenIssueOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenIssueOrder) ProtoMessage() {}

func (x *TokenIssueOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenIssueOrder.ProtoReflect.Descriptor instead.
func (*TokenIssueOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{5}
}

func (x *TokenIssueOrder) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TokenIssueOrder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenIssueOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenIssueOrder) GetTotalSupply() int64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *TokenIssueOrder) GetMintable() bool {
	if x != nil {
		return x.Mintable
	}
	return false
}

type TokenMintOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0x467E0829      // prefix
	From   []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`      // owner address
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`  // token symbol, in full name with "-" suffix
	Amount int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"` // amount to mint
}

func (x *TokenMintOrder) Reset() {
	*x = TokenMintOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenMintOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenMintOrder) ProtoMessage() {}

func (x *TokenMintOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenMintOrder.ProtoReflect.Descriptor instead.
func (*TokenMintOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{6}
}

func (x *TokenMintOrder) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TokenMintOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenMintOrder) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TokenBurnOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0x7ED2D2A0      // prefix
	From   []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`      // owner address
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`  // token symbol, in full name with "-" suffix
	Amount int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"` // amount to burn
}

func (x *TokenBurnOrder) Reset() {
	*x = TokenBurnOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBurnOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBurnOrder) ProtoMessage() {}

func (x *TokenBurnOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBurnOrder.ProtoReflect.Descriptor instead.
func (*TokenBurnOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{7}
}

func (x *TokenBurnOrder) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TokenBurnOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenBurnOrder) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TokenFreezeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0xE774B32D      // prefix
	From   []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`      // owner address
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`  // token symbol, in full name with "-" suffix
	Amount int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"` // amount of token to freeze
}

func (x *TokenFreezeOrder) Reset() {
	*x = TokenFreezeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenFreezeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFreezeOrder) ProtoMessage() {}

func (x *TokenFreezeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFreezeOrder.ProtoReflect.Descriptor instead.
func (*TokenFreezeOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{8}
}

func (x *TokenFreezeOrder) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TokenFreezeOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenFreezeOrder) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TokenUnfreezeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0x6515FF0D      // prefix
	From   []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`      // owner address
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`  // token symbol, in full name with "-" suffix
	Amount int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"` // amount of token to unfreeze
}

func (x *TokenUnfreezeOrder) Reset() {
	*x = TokenUnfreezeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenUnfreezeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUnfreezeOrder) ProtoMessage() {}

func (x *TokenUnfreezeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUnfreezeOrder.ProtoReflect.Descriptor instead.
func (*TokenUnfreezeOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{9}
}

func (x *TokenUnfreezeOrder) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TokenUnfreezeOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenUnfreezeOrder) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type HTLTOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0xB33F9A24      // prefix
	From                []byte             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"` // signer address
	To                  []byte             `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`     // recipient address
	RecipientOtherChain string             `protobuf:"bytes,3,opt,name=recipient_other_chain,json=recipientOtherChain,proto3" json:"recipient_other_chain,omitempty"`
	SenderOtherChain    string             `protobuf:"bytes,4,opt,name=sender_other_chain,json=senderOtherChain,proto3" json:"sender_other_chain,omitempty"`
	RandomNumberHash    []byte             `protobuf:"bytes,5,opt,name=random_number_hash,json=randomNumberHash,proto3" json:"random_number_hash,omitempty"` //hash of a random number and timestamp, based on SHA256
	Timestamp           int64              `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount              []*SendOrder_Token `protobuf:"bytes,7,rep,name=amount,proto3" json:"amount,omitempty"`
	ExpectedIncome      string             `protobuf:"bytes,8,opt,name=expected_income,json=expectedIncome,proto3" json:"expected_income,omitempty"` // expected gained token on the other chain
	HeightSpan          int64              `protobuf:"varint,9,opt,name=height_span,json=heightSpan,proto3" json:"height_span,omitempty"`
	CrossChain          bool               `protobuf:"varint,10,opt,name=cross_chain,json=crossChain,proto3" json:"cross_chain,omitempty"`
}

func (x *HTLTOrder) Reset() {
	*x = HTLTOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTLTOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTLTOrder) ProtoMessage() {}

func (x *HTLTOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTLTOrder.ProtoReflect.Descriptor instead.
func (*HTLTOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{10}
}

func (x *HTLTOrder) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *HTLTOrder) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *HTLTOrder) GetRecipientOtherChain() string {
	if x != nil {
		return x.RecipientOtherChain
	}
	return ""
}

func (x *HTLTOrder) GetSenderOtherChain() string {
	if x != nil {
		return x.SenderOtherChain
	}
	return ""
}

func (x *HTLTOrder) GetRandomNumberHash() []byte {
	if x != nil {
		return x.RandomNumberHash
	}
	return nil
}

func (x *HTLTOrder) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HTLTOrder) GetAmount() []*SendOrder_Token {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *HTLTOrder) GetExpectedIncome() string {
	if x != nil {
		return x.ExpectedIncome
	}
	return ""
}

func (x *HTLTOrder) GetHeightSpan() int64 {
	if x != nil {
		return x.HeightSpan
	}
	return 0
}

func (x *HTLTOrder) GetCrossChain() bool {
	if x != nil {
		return x.CrossChain
	}
	return false
}

type DepositHTLTOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0xB33F9A24      // prefix
	From   []byte             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"` // signer address
	Amount []*SendOrder_Token `protobuf:"bytes,2,rep,name=amount,proto3" json:"amount,omitempty"`
	SwapId []byte             `protobuf:"bytes,3,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
}

func (x *DepositHTLTOrder) Reset() {
	*x = DepositHTLTOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositHTLTOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositHTLTOrder) ProtoMessage() {}

func (x *DepositHTLTOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositHTLTOrder.ProtoReflect.Descriptor instead.
func (*DepositHTLTOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{11}
}

func (x *DepositHTLTOrder) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *DepositHTLTOrder) GetAmount() []*SendOrder_Token {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *DepositHTLTOrder) GetSwapId() []byte {
	if x != nil {
		return x.SwapId
	}
	return nil
}

type ClaimHTLOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0xC1665300      // prefix
	From         []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"` // signer address
	SwapId       []byte `protobuf:"bytes,2,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
	RandomNumber []byte `protobuf:"bytes,3,opt,name=random_number,json=randomNumber,proto3" json:"random_number,omitempty"`
}

func (x *ClaimHTLOrder) Reset() {
	*x = ClaimHTLOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimHTLOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimHTLOrder) ProtoMessage() {}

func (x *ClaimHTLOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimHTLOrder.ProtoReflect.Descriptor instead.
func (*ClaimHTLOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{12}
}

func (x *ClaimHTLOrder) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ClaimHTLOrder) GetSwapId() []byte {
	if x != nil {
		return x.SwapId
	}
	return nil
}

func (x *ClaimHTLOrder) GetRandomNumber() []byte {
	if x != nil {
		return x.RandomNumber
	}
	return nil
}

type RefundHTLTOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0x3454A27C      // prefix
	From   []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"` // signer address
	SwapId []byte `protobuf:"bytes,2,opt,name=swap_id,json=swapId,proto3" json:"swap_id,omitempty"`
}

func (x *RefundHTLTOrder) Reset() {
	*x = RefundHTLTOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundHTLTOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundHTLTOrder) ProtoMessage() {}

func (x *RefundHTLTOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundHTLTOrder.ProtoReflect.Descriptor instead.
func (*RefundHTLTOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{13}
}

func (x *RefundHTLTOrder) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *RefundHTLTOrder) GetSwapId() []byte {
	if x != nil {
		return x.SwapId
	}
	return nil
}

type TransferOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From       []byte           `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To         []byte           `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Amount     *SendOrder_Token `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	ExpireTime int64            `protobuf:"varint,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *TransferOut) Reset() {
	*x = TransferOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOut) ProtoMessage() {}

func (x *TransferOut) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOut.ProtoReflect.Descriptor instead.
func (*TransferOut) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{14}
}

func (x *TransferOut) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TransferOut) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TransferOut) GetAmount() *SendOrder_Token {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransferOut) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type SideChainDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatorAddr []byte           `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr []byte           `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Delegation    *SendOrder_Token `protobuf:"bytes,3,opt,name=delegation,proto3" json:"delegation,omitempty"`
	ChainId       string           `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *SideChainDelegate) Reset() {
	*x = SideChainDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideChainDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideChainDelegate) ProtoMessage() {}

func (x *SideChainDelegate) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideChainDelegate.ProtoReflect.Descriptor instead.
func (*SideChainDelegate) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{15}
}

func (x *SideChainDelegate) GetDelegatorAddr() []byte {
	if x != nil {
		return x.DelegatorAddr
	}
	return nil
}

func (x *SideChainDelegate) GetValidatorAddr() []byte {
	if x != nil {
		return x.ValidatorAddr
	}
	return nil
}

func (x *SideChainDelegate) GetDelegation() *SendOrder_Token {
	if x != nil {
		return x.Delegation
	}
	return nil
}

func (x *SideChainDelegate) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type SideChainRedelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatorAddr    []byte           `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorSrcAddr []byte           `protobuf:"bytes,2,opt,name=validator_src_addr,json=validatorSrcAddr,proto3" json:"validator_src_addr,omitempty"`
	ValidatorDstAddr []byte           `protobuf:"bytes,3,opt,name=validator_dst_addr,json=validatorDstAddr,proto3" json:"validator_dst_addr,omitempty"`
	Amount           *SendOrder_Token `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	ChainId          string           `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *SideChainRedelegate) Reset() {
	*x = SideChainRedelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideChainRedelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideChainRedelegate) ProtoMessage() {}

func (x *SideChainRedelegate) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideChainRedelegate.ProtoReflect.Descriptor instead.
func (*SideChainRedelegate) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{16}
}

func (x *SideChainRedelegate) GetDelegatorAddr() []byte {
	if x != nil {
		return x.DelegatorAddr
	}
	return nil
}

func (x *SideChainRedelegate) GetValidatorSrcAddr() []byte {
	if x != nil {
		return x.ValidatorSrcAddr
	}
	return nil
}

func (x *SideChainRedelegate) GetValidatorDstAddr() []byte {
	if x != nil {
		return x.ValidatorDstAddr
	}
	return nil
}

func (x *SideChainRedelegate) GetAmount() *SendOrder_Token {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SideChainRedelegate) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type SideChainUndelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatorAddr []byte           `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr []byte           `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Amount        *SendOrder_Token `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	ChainId       string           `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *SideChainUndelegate) Reset() {
	*x = SideChainUndelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideChainUndelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideChainUndelegate) ProtoMessage() {}

func (x *SideChainUndelegate) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideChainUndelegate.ProtoReflect.Descriptor instead.
func (*SideChainUndelegate) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{17}
}

func (x *SideChainUndelegate) GetDelegatorAddr() []byte {
	if x != nil {
		return x.DelegatorAddr
	}
	return nil
}

func (x *SideChainUndelegate) GetValidatorAddr() []byte {
	if x != nil {
		return x.ValidatorAddr
	}
	return nil
}

func (x *SideChainUndelegate) GetAmount() *SendOrder_Token {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SideChainUndelegate) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type TimeLockOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress []byte `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"` // owner address
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Array of symbol/amount pairs. see SDK https://github.com/binance-chain/javascript-sdk/blob/master/docs/api-docs/classes/tokenmanagement.md#timelock
	Amount   []*SendOrder_Token `protobuf:"bytes,3,rep,name=amount,proto3" json:"amount,omitempty"`
	LockTime int64              `protobuf:"varint,4,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
}

func (x *TimeLockOrder) Reset() {
	*x = TimeLockOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeLockOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeLockOrder) ProtoMessage() {}

func (x *TimeLockOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeLockOrder.ProtoReflect.Descriptor instead.
func (*TimeLockOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{18}
}

func (x *TimeLockOrder) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *TimeLockOrder) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TimeLockOrder) GetAmount() []*SendOrder_Token {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TimeLockOrder) GetLockTime() int64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

type TimeRelockOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress []byte `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"` // owner address
	Id          int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                     // order ID
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Array of symbol/amount pairs.
	Amount   []*SendOrder_Token `protobuf:"bytes,4,rep,name=amount,proto3" json:"amount,omitempty"`
	LockTime int64              `protobuf:"varint,5,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
}

func (x *TimeRelockOrder) Reset() {
	*x = TimeRelockOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRelockOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRelockOrder) ProtoMessage() {}

func (x *TimeRelockOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRelockOrder.ProtoReflect.Descriptor instead.
func (*TimeRelockOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{19}
}

func (x *TimeRelockOrder) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *TimeRelockOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TimeRelockOrder) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TimeRelockOrder) GetAmount() []*SendOrder_Token {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TimeRelockOrder) GetLockTime() int64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

type TimeUnlockOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress []byte `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"` // owner address
	Id          int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                     // order ID
}

func (x *TimeUnlockOrder) Reset() {
	*x = TimeUnlockOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeUnlockOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeUnlockOrder) ProtoMessage() {}

func (x *TimeUnlockOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeUnlockOrder.ProtoReflect.Descriptor instead.
func (*TimeUnlockOrder) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{20}
}

func (x *TimeUnlockOrder) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *TimeUnlockOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Input data necessary to create a signed order.
type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId       string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	AccountNumber int64  `protobuf:"varint,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Sequence      int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Source        int64  `protobuf:"varint,4,opt,name=source,proto3" json:"source,omitempty"`
	Memo          string `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	PrivateKey    []byte `protobuf:"bytes,6,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Types that are assignable to OrderOneof:
	//	*SigningInput_TradeOrder
	//	*SigningInput_CancelTradeOrder
	//	*SigningInput_SendOrder
	//	*SigningInput_FreezeOrder
	//	*SigningInput_UnfreezeOrder
	//	*SigningInput_HtltOrder
	//	*SigningInput_DepositHTLTOrder
	//	*SigningInput_ClaimHTLTOrder
	//	*SigningInput_RefundHTLTOrder
	//	*SigningInput_IssueOrder
	//	*SigningInput_MintOrder
	//	*SigningInput_BurnOrder
	//	*SigningInput_TransferOutOrder
	//	*SigningInput_SideDelegateOrder
	//	*SigningInput_SideRedelegateOrder
	//	*SigningInput_SideUndelegateOrder
	//	*SigningInput_TimeLockOrder
	//	*SigningInput_TimeRelockOrder
	//	*SigningInput_TimeUnlockOrder
	OrderOneof isSigningInput_OrderOneof `protobuf_oneof:"order_oneof"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{21}
}

func (x *SigningInput) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *SigningInput) GetAccountNumber() int64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *SigningInput) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *SigningInput) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *SigningInput) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (m *SigningInput) GetOrderOneof() isSigningInput_OrderOneof {
	if m != nil {
		return m.OrderOneof
	}
	return nil
}

func (x *SigningInput) GetTradeOrder() *TradeOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_TradeOrder); ok {
		return x.TradeOrder
	}
	return nil
}

func (x *SigningInput) GetCancelTradeOrder() *CancelTradeOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_CancelTradeOrder); ok {
		return x.CancelTradeOrder
	}
	return nil
}

func (x *SigningInput) GetSendOrder() *SendOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_SendOrder); ok {
		return x.SendOrder
	}
	return nil
}

func (x *SigningInput) GetFreezeOrder() *TokenFreezeOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_FreezeOrder); ok {
		return x.FreezeOrder
	}
	return nil
}

func (x *SigningInput) GetUnfreezeOrder() *TokenUnfreezeOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_UnfreezeOrder); ok {
		return x.UnfreezeOrder
	}
	return nil
}

func (x *SigningInput) GetHtltOrder() *HTLTOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_HtltOrder); ok {
		return x.HtltOrder
	}
	return nil
}

func (x *SigningInput) GetDepositHTLTOrder() *DepositHTLTOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_DepositHTLTOrder); ok {
		return x.DepositHTLTOrder
	}
	return nil
}

func (x *SigningInput) GetClaimHTLTOrder() *ClaimHTLOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_ClaimHTLTOrder); ok {
		return x.ClaimHTLTOrder
	}
	return nil
}

func (x *SigningInput) GetRefundHTLTOrder() *RefundHTLTOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_RefundHTLTOrder); ok {
		return x.RefundHTLTOrder
	}
	return nil
}

func (x *SigningInput) GetIssueOrder() *TokenIssueOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_IssueOrder); ok {
		return x.IssueOrder
	}
	return nil
}

func (x *SigningInput) GetMintOrder() *TokenMintOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_MintOrder); ok {
		return x.MintOrder
	}
	return nil
}

func (x *SigningInput) GetBurnOrder() *TokenBurnOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_BurnOrder); ok {
		return x.BurnOrder
	}
	return nil
}

func (x *SigningInput) GetTransferOutOrder() *TransferOut {
	if x, ok := x.GetOrderOneof().(*SigningInput_TransferOutOrder); ok {
		return x.TransferOutOrder
	}
	return nil
}

func (x *SigningInput) GetSideDelegateOrder() *SideChainDelegate {
	if x, ok := x.GetOrderOneof().(*SigningInput_SideDelegateOrder); ok {
		return x.SideDelegateOrder
	}
	return nil
}

func (x *SigningInput) GetSideRedelegateOrder() *SideChainRedelegate {
	if x, ok := x.GetOrderOneof().(*SigningInput_SideRedelegateOrder); ok {
		return x.SideRedelegateOrder
	}
	return nil
}

func (x *SigningInput) GetSideUndelegateOrder() *SideChainUndelegate {
	if x, ok := x.GetOrderOneof().(*SigningInput_SideUndelegateOrder); ok {
		return x.SideUndelegateOrder
	}
	return nil
}

func (x *SigningInput) GetTimeLockOrder() *TimeLockOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_TimeLockOrder); ok {
		return x.TimeLockOrder
	}
	return nil
}

func (x *SigningInput) GetTimeRelockOrder() *TimeRelockOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_TimeRelockOrder); ok {
		return x.TimeRelockOrder
	}
	return nil
}

func (x *SigningInput) GetTimeUnlockOrder() *TimeUnlockOrder {
	if x, ok := x.GetOrderOneof().(*SigningInput_TimeUnlockOrder); ok {
		return x.TimeUnlockOrder
	}
	return nil
}

type isSigningInput_OrderOneof interface {
	isSigningInput_OrderOneof()
}

type SigningInput_TradeOrder struct {
	TradeOrder *TradeOrder `protobuf:"bytes,8,opt,name=trade_order,json=tradeOrder,proto3,oneof"`
}

type SigningInput_CancelTradeOrder struct {
	CancelTradeOrder *CancelTradeOrder `protobuf:"bytes,9,opt,name=cancel_trade_order,json=cancelTradeOrder,proto3,oneof"`
}

type SigningInput_SendOrder struct {
	SendOrder *SendOrder `protobuf:"bytes,10,opt,name=send_order,json=sendOrder,proto3,oneof"`
}

type SigningInput_FreezeOrder struct {
	FreezeOrder *TokenFreezeOrder `protobuf:"bytes,11,opt,name=freeze_order,json=freezeOrder,proto3,oneof"`
}

type SigningInput_UnfreezeOrder struct {
	UnfreezeOrder *TokenUnfreezeOrder `protobuf:"bytes,12,opt,name=unfreeze_order,json=unfreezeOrder,proto3,oneof"`
}

type SigningInput_HtltOrder struct {
	HtltOrder *HTLTOrder `protobuf:"bytes,13,opt,name=htlt_order,json=htltOrder,proto3,oneof"`
}

type SigningInput_DepositHTLTOrder struct {
	DepositHTLTOrder *DepositHTLTOrder `protobuf:"bytes,14,opt,name=depositHTLT_order,json=depositHTLTOrder,proto3,oneof"`
}

type SigningInput_ClaimHTLTOrder struct {
	ClaimHTLTOrder *ClaimHTLOrder `protobuf:"bytes,15,opt,name=claimHTLT_order,json=claimHTLTOrder,proto3,oneof"`
}

type SigningInput_RefundHTLTOrder struct {
	RefundHTLTOrder *RefundHTLTOrder `protobuf:"bytes,16,opt,name=refundHTLT_order,json=refundHTLTOrder,proto3,oneof"`
}

type SigningInput_IssueOrder struct {
	IssueOrder *TokenIssueOrder `protobuf:"bytes,17,opt,name=issue_order,json=issueOrder,proto3,oneof"`
}

type SigningInput_MintOrder struct {
	MintOrder *TokenMintOrder `protobuf:"bytes,18,opt,name=mint_order,json=mintOrder,proto3,oneof"`
}

type SigningInput_BurnOrder struct {
	BurnOrder *TokenBurnOrder `protobuf:"bytes,19,opt,name=burn_order,json=burnOrder,proto3,oneof"`
}

type SigningInput_TransferOutOrder struct {
	TransferOutOrder *TransferOut `protobuf:"bytes,20,opt,name=transfer_out_order,json=transferOutOrder,proto3,oneof"`
}

type SigningInput_SideDelegateOrder struct {
	SideDelegateOrder *SideChainDelegate `protobuf:"bytes,21,opt,name=side_delegate_order,json=sideDelegateOrder,proto3,oneof"`
}

type SigningInput_SideRedelegateOrder struct {
	SideRedelegateOrder *SideChainRedelegate `protobuf:"bytes,22,opt,name=side_redelegate_order,json=sideRedelegateOrder,proto3,oneof"`
}

type SigningInput_SideUndelegateOrder struct {
	SideUndelegateOrder *SideChainUndelegate `protobuf:"bytes,23,opt,name=side_undelegate_order,json=sideUndelegateOrder,proto3,oneof"`
}

type SigningInput_TimeLockOrder struct {
	TimeLockOrder *TimeLockOrder `protobuf:"bytes,24,opt,name=time_lock_order,json=timeLockOrder,proto3,oneof"`
}

type SigningInput_TimeRelockOrder struct {
	TimeRelockOrder *TimeRelockOrder `protobuf:"bytes,25,opt,name=time_relock_order,json=timeRelockOrder,proto3,oneof"`
}

type SigningInput_TimeUnlockOrder struct {
	TimeUnlockOrder *TimeUnlockOrder `protobuf:"bytes,26,opt,name=time_unlock_order,json=timeUnlockOrder,proto3,oneof"`
}

func (*SigningInput_TradeOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_CancelTradeOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_SendOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_FreezeOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_UnfreezeOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_HtltOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_DepositHTLTOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_ClaimHTLTOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_RefundHTLTOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_IssueOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_MintOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_BurnOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_TransferOutOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_SideDelegateOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_SideRedelegateOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_SideUndelegateOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_TimeLockOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_TimeRelockOrder) isSigningInput_OrderOneof() {}

func (*SigningInput_TimeUnlockOrder) isSigningInput_OrderOneof() {}

// Transaction signing output.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	/// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	/// error description
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{22}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type Signature_PubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Signature_PubKey) Reset() {
	*x = Signature_PubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature_PubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature_PubKey) ProtoMessage() {}

func (x *Signature_PubKey) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature_PubKey.ProtoReflect.Descriptor instead.
func (*Signature_PubKey) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{1, 0}
}

// 0x2A2C87FA
// A symbol-amount pair.  Could be moved out of SendOrder; kept here for backward compatibility.
type SendOrder_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SendOrder_Token) Reset() {
	*x = SendOrder_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOrder_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOrder_Token) ProtoMessage() {}

func (x *SendOrder_Token) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOrder_Token.ProtoReflect.Descriptor instead.
func (*SendOrder_Token) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SendOrder_Token) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *SendOrder_Token) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type SendOrder_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Coins   []*SendOrder_Token `protobuf:"bytes,2,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *SendOrder_Input) Reset() {
	*x = SendOrder_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOrder_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOrder_Input) ProtoMessage() {}

func (x *SendOrder_Input) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOrder_Input.ProtoReflect.Descriptor instead.
func (*SendOrder_Input) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{4, 1}
}

func (x *SendOrder_Input) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SendOrder_Input) GetCoins() []*SendOrder_Token {
	if x != nil {
		return x.Coins
	}
	return nil
}

type SendOrder_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Coins   []*SendOrder_Token `protobuf:"bytes,2,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *SendOrder_Output) Reset() {
	*x = SendOrder_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Binance_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOrder_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOrder_Output) ProtoMessage() {}

func (x *SendOrder_Output) ProtoReflect() protoreflect.Message {
	mi := &file_Binance_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOrder_Output.ProtoReflect.Descriptor instead.
func (*SendOrder_Output) Descriptor() ([]byte, []int) {
	return file_Binance_proto_rawDescGZIP(), []int{4, 2}
}

func (x *SendOrder_Output) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SendOrder_Output) GetCoins() []*SendOrder_Token {
	if x != nil {
		return x.Coins
	}
	return nil
}

var File_Binance_proto protoreflect.FileDescriptor

var file_Binance_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x81, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6d,
	0x73, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x10, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x66, 0x69, 0x64, 0x22, 0xf4, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x35, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x5a, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x1a, 0x5b,
	0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0f,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x54,
	0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x72,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x10, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x58, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x6e, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x03, 0x0a,
	0x09, 0x48, 0x54, 0x4c, 0x54, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54,
	0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x70, 0x61,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x7a, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x54, 0x4c,
	0x54, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e,
	0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x77, 0x61, 0x70, 0x49, 0x64, 0x22, 0x61,
	0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x54, 0x4c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x77, 0x61, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x3e, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x48, 0x54, 0x4c, 0x54, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x77, 0x61, 0x70, 0x49,
	0x64, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x13, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x73,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e,
	0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0xac, 0x01, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xbe, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x44, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf9, 0x0c, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x57,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x57,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x0e, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55,
	0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d,
	0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x0a, 0x68, 0x74, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x54, 0x4c, 0x54, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x09, 0x68, 0x74, 0x6c, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x11, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x54, 0x4c, 0x54, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x48, 0x54, 0x4c, 0x54, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x54, 0x4c, 0x54, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x54, 0x4c, 0x54, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x48, 0x54, 0x4c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x48, 0x54, 0x4c, 0x54, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x10, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x48, 0x54, 0x4c, 0x54, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x48, 0x54,
	0x4c, 0x54, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x48, 0x54, 0x4c, 0x54, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x75, 0x72, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x62, 0x75, 0x72,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x13, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x69, 0x64, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x15,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x57,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x69, 0x64, 0x65, 0x52, 0x65, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x73, 0x69, 0x64, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54,
	0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x4f, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x54, 0x57, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x54, 0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x56, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Binance_proto_rawDescOnce sync.Once
	file_Binance_proto_rawDescData = file_Binance_proto_rawDesc
)

func file_Binance_proto_rawDescGZIP() []byte {
	file_Binance_proto_rawDescOnce.Do(func() {
		file_Binance_proto_rawDescData = protoimpl.X.CompressGZIP(file_Binance_proto_rawDescData)
	})
	return file_Binance_proto_rawDescData
}

var file_Binance_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_Binance_proto_goTypes = []interface{}{
	(*Transaction)(nil),         // 0: TW.Binance.Proto.Transaction
	(*Signature)(nil),           // 1: TW.Binance.Proto.Signature
	(*TradeOrder)(nil),          // 2: TW.Binance.Proto.TradeOrder
	(*CancelTradeOrder)(nil),    // 3: TW.Binance.Proto.CancelTradeOrder
	(*SendOrder)(nil),           // 4: TW.Binance.Proto.SendOrder
	(*TokenIssueOrder)(nil),     // 5: TW.Binance.Proto.TokenIssueOrder
	(*TokenMintOrder)(nil),      // 6: TW.Binance.Proto.TokenMintOrder
	(*TokenBurnOrder)(nil),      // 7: TW.Binance.Proto.TokenBurnOrder
	(*TokenFreezeOrder)(nil),    // 8: TW.Binance.Proto.TokenFreezeOrder
	(*TokenUnfreezeOrder)(nil),  // 9: TW.Binance.Proto.TokenUnfreezeOrder
	(*HTLTOrder)(nil),           // 10: TW.Binance.Proto.HTLTOrder
	(*DepositHTLTOrder)(nil),    // 11: TW.Binance.Proto.DepositHTLTOrder
	(*ClaimHTLOrder)(nil),       // 12: TW.Binance.Proto.ClaimHTLOrder
	(*RefundHTLTOrder)(nil),     // 13: TW.Binance.Proto.RefundHTLTOrder
	(*TransferOut)(nil),         // 14: TW.Binance.Proto.TransferOut
	(*SideChainDelegate)(nil),   // 15: TW.Binance.Proto.SideChainDelegate
	(*SideChainRedelegate)(nil), // 16: TW.Binance.Proto.SideChainRedelegate
	(*SideChainUndelegate)(nil), // 17: TW.Binance.Proto.SideChainUndelegate
	(*TimeLockOrder)(nil),       // 18: TW.Binance.Proto.TimeLockOrder
	(*TimeRelockOrder)(nil),     // 19: TW.Binance.Proto.TimeRelockOrder
	(*TimeUnlockOrder)(nil),     // 20: TW.Binance.Proto.TimeUnlockOrder
	(*SigningInput)(nil),        // 21: TW.Binance.Proto.SigningInput
	(*SigningOutput)(nil),       // 22: TW.Binance.Proto.SigningOutput
	(*Signature_PubKey)(nil),    // 23: TW.Binance.Proto.Signature.PubKey
	(*SendOrder_Token)(nil),     // 24: TW.Binance.Proto.SendOrder.Token
	(*SendOrder_Input)(nil),     // 25: TW.Binance.Proto.SendOrder.Input
	(*SendOrder_Output)(nil),    // 26: TW.Binance.Proto.SendOrder.Output
	(common.SigningError)(0),    // 27: TW.Common.Proto.SigningError
}
var file_Binance_proto_depIdxs = []int32{
	25, // 0: TW.Binance.Proto.SendOrder.inputs:type_name -> TW.Binance.Proto.SendOrder.Input
	26, // 1: TW.Binance.Proto.SendOrder.outputs:type_name -> TW.Binance.Proto.SendOrder.Output
	24, // 2: TW.Binance.Proto.HTLTOrder.amount:type_name -> TW.Binance.Proto.SendOrder.Token
	24, // 3: TW.Binance.Proto.DepositHTLTOrder.amount:type_name -> TW.Binance.Proto.SendOrder.Token
	24, // 4: TW.Binance.Proto.TransferOut.amount:type_name -> TW.Binance.Proto.SendOrder.Token
	24, // 5: TW.Binance.Proto.SideChainDelegate.delegation:type_name -> TW.Binance.Proto.SendOrder.Token
	24, // 6: TW.Binance.Proto.SideChainRedelegate.amount:type_name -> TW.Binance.Proto.SendOrder.Token
	24, // 7: TW.Binance.Proto.SideChainUndelegate.amount:type_name -> TW.Binance.Proto.SendOrder.Token
	24, // 8: TW.Binance.Proto.TimeLockOrder.amount:type_name -> TW.Binance.Proto.SendOrder.Token
	24, // 9: TW.Binance.Proto.TimeRelockOrder.amount:type_name -> TW.Binance.Proto.SendOrder.Token
	2,  // 10: TW.Binance.Proto.SigningInput.trade_order:type_name -> TW.Binance.Proto.TradeOrder
	3,  // 11: TW.Binance.Proto.SigningInput.cancel_trade_order:type_name -> TW.Binance.Proto.CancelTradeOrder
	4,  // 12: TW.Binance.Proto.SigningInput.send_order:type_name -> TW.Binance.Proto.SendOrder
	8,  // 13: TW.Binance.Proto.SigningInput.freeze_order:type_name -> TW.Binance.Proto.TokenFreezeOrder
	9,  // 14: TW.Binance.Proto.SigningInput.unfreeze_order:type_name -> TW.Binance.Proto.TokenUnfreezeOrder
	10, // 15: TW.Binance.Proto.SigningInput.htlt_order:type_name -> TW.Binance.Proto.HTLTOrder
	11, // 16: TW.Binance.Proto.SigningInput.depositHTLT_order:type_name -> TW.Binance.Proto.DepositHTLTOrder
	12, // 17: TW.Binance.Proto.SigningInput.claimHTLT_order:type_name -> TW.Binance.Proto.ClaimHTLOrder
	13, // 18: TW.Binance.Proto.SigningInput.refundHTLT_order:type_name -> TW.Binance.Proto.RefundHTLTOrder
	5,  // 19: TW.Binance.Proto.SigningInput.issue_order:type_name -> TW.Binance.Proto.TokenIssueOrder
	6,  // 20: TW.Binance.Proto.SigningInput.mint_order:type_name -> TW.Binance.Proto.TokenMintOrder
	7,  // 21: TW.Binance.Proto.SigningInput.burn_order:type_name -> TW.Binance.Proto.TokenBurnOrder
	14, // 22: TW.Binance.Proto.SigningInput.transfer_out_order:type_name -> TW.Binance.Proto.TransferOut
	15, // 23: TW.Binance.Proto.SigningInput.side_delegate_order:type_name -> TW.Binance.Proto.SideChainDelegate
	16, // 24: TW.Binance.Proto.SigningInput.side_redelegate_order:type_name -> TW.Binance.Proto.SideChainRedelegate
	17, // 25: TW.Binance.Proto.SigningInput.side_undelegate_order:type_name -> TW.Binance.Proto.SideChainUndelegate
	18, // 26: TW.Binance.Proto.SigningInput.time_lock_order:type_name -> TW.Binance.Proto.TimeLockOrder
	19, // 27: TW.Binance.Proto.SigningInput.time_relock_order:type_name -> TW.Binance.Proto.TimeRelockOrder
	20, // 28: TW.Binance.Proto.SigningInput.time_unlock_order:type_name -> TW.Binance.Proto.TimeUnlockOrder
	27, // 29: TW.Binance.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	24, // 30: TW.Binance.Proto.SendOrder.Input.coins:type_name -> TW.Binance.Proto.SendOrder.Token
	24, // 31: TW.Binance.Proto.SendOrder.Output.coins:type_name -> TW.Binance.Proto.SendOrder.Token
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_Binance_proto_init() }
func file_Binance_proto_init() {
	if File_Binance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Binance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTradeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenIssueOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenMintOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBurnOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenFreezeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenUnfreezeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTLTOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositHTLTOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimHTLOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundHTLTOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideChainDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideChainRedelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideChainUndelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeLockOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRelockOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeUnlockOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature_PubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOrder_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOrder_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Binance_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOrder_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Binance_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*SigningInput_TradeOrder)(nil),
		(*SigningInput_CancelTradeOrder)(nil),
		(*SigningInput_SendOrder)(nil),
		(*SigningInput_FreezeOrder)(nil),
		(*SigningInput_UnfreezeOrder)(nil),
		(*SigningInput_HtltOrder)(nil),
		(*SigningInput_DepositHTLTOrder)(nil),
		(*SigningInput_ClaimHTLTOrder)(nil),
		(*SigningInput_RefundHTLTOrder)(nil),
		(*SigningInput_IssueOrder)(nil),
		(*SigningInput_MintOrder)(nil),
		(*SigningInput_BurnOrder)(nil),
		(*SigningInput_TransferOutOrder)(nil),
		(*SigningInput_SideDelegateOrder)(nil),
		(*SigningInput_SideRedelegateOrder)(nil),
		(*SigningInput_SideUndelegateOrder)(nil),
		(*SigningInput_TimeLockOrder)(nil),
		(*SigningInput_TimeRelockOrder)(nil),
		(*SigningInput_TimeUnlockOrder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Binance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Binance_proto_goTypes,
		DependencyIndexes: file_Binance_proto_depIdxs,
		MessageInfos:      file_Binance_proto_msgTypes,
	}.Build()
	File_Binance_proto = out.File
	file_Binance_proto_rawDesc = nil
	file_Binance_proto_goTypes = nil
	file_Binance_proto_depIdxs = nil
}
